use core::panic;
use std::f32::consts::PI;

use macroquad::prelude as mq;
use macroquad::prelude::glam;
use rapier2d::prelude::*;

const PIXELS_PER_METER: i32 = 10;
const WINDOW_SIZE_PX: (i32, i32) = (1260, 768);
const WINDOW_SIZE_METERS: (i32, i32) = (
    WINDOW_SIZE_PX.0 / PIXELS_PER_METER,
    WINDOW_SIZE_PX.1 / PIXELS_PER_METER,
);

const AGENT_SIZE: i32 = 10;

const SHEEP_ID: u128 = 0;
const SHEPHERD_ID: u128 = 1;
const OBSTACLE_ID: u128 = 2;

struct PhysicsState {
    pub islands: IslandManager,
    pub broad_phase: DefaultBroadPhase,
    pub narrow_phase: NarrowPhase,
    pub bodies: RigidBodySet,
    pub colliders: ColliderSet,
    pub impulse_joints: ImpulseJointSet,
    pub multibody_joints: MultibodyJointSet,
    pub ccd_solver: CCDSolver,
    pub query_pipeline: QueryPipeline,
    pub integration_parameters: IntegrationParameters,
    pub gravity: Vector<f32>,
    pub physics_hooks: (),
    pub event_handler: (),
}

struct World {
    physics_state: PhysicsState,
    physics_pipeline: PhysicsPipeline,
}

impl World {
    fn new() -> Self {
        let mut new_world = World {
            physics_state: PhysicsState {
                islands: IslandManager::new(),
                broad_phase: DefaultBroadPhase::new(),
                narrow_phase: NarrowPhase::new(),
                bodies: RigidBodySet::new(),
                colliders: ColliderSet::new(),
                impulse_joints: ImpulseJointSet::new(),
                multibody_joints: MultibodyJointSet::new(),
                ccd_solver: CCDSolver::new(),
                query_pipeline: QueryPipeline::new(),
                integration_parameters: IntegrationParameters::default(),
                gravity: vector![0.0, 0.0],
                physics_hooks: (),
                event_handler: (),
            },
            physics_pipeline: PhysicsPipeline::new(),
        };
        let rigid_body = RigidBodyBuilder::dynamic()
            .translation(vector![100.0, 100.0])
            .user_data(SHEEP_ID)
            .build();
        let collider = ColliderBuilder::ball(0.5).restitution(0.7).build();
        let sensor = ColliderBuilder::ball(1.0).sensor(true).density(0.0).build();
        let ball_body_handle = new_world.physics_state.bodies.insert(rigid_body);
        new_world.physics_state.colliders.insert_with_parent(
            collider,
            ball_body_handle,
            &mut new_world.physics_state.bodies,
        );
        new_world.physics_state.colliders.insert_with_parent(
            sensor,
            ball_body_handle,
            &mut new_world.physics_state.bodies,
        );
        new_world
    }

    fn draw(&self) {
        self.physics_state
            .bodies
            .iter()
            .for_each(|body| match body {
                (
                    _handle,
                    RigidBody {
                        user_data: SHEEP_ID,
                        ..
                    },
                ) => draw_triangle(*body.1.translation(), body.1.rotation().angle(), mq::BLUE),
                (
                    _handle,
                    RigidBody {
                        user_data: SHEPHERD_ID,
                        ..
                    },
                ) => draw_triangle(*body.1.translation(), body.1.rotation().angle(), mq::RED),
                _ => panic!(),
            });
    }

    fn update(&mut self) {
        self.physics_pipeline.step(
            &self.physics_state.gravity,
            &self.physics_state.integration_parameters,
            &mut self.physics_state.islands,
            &mut self.physics_state.broad_phase,
            &mut self.physics_state.narrow_phase,
            &mut self.physics_state.bodies,
            &mut self.physics_state.colliders,
            &mut self.physics_state.impulse_joints,
            &mut self.physics_state.multibody_joints,
            &mut self.physics_state.ccd_solver,
            Some(&mut self.physics_state.query_pipeline),
            &self.physics_state.physics_hooks,
            &self.physics_state.event_handler,
        );

        self.physics_state
            .narrow_phase
            .intersection_pairs()
            .for_each(|(handle_one, handle_two, intersecting)| {
                // Skip if the colliders aren't intersecting
                if !intersecting {}

                let handle_one_is_sensor = self.physics_state.colliders[handle_one].is_sensor();
                let handle_two_is_sensor = self.physics_state.colliders[handle_two].is_sensor();

                // Skip if both colliders are sensors
                if handle_one_is_sensor && handle_two_is_sensor {
                    println!("hit")
                }

                // Skip if the sensor and collider belong to the same object
                if self.physics_state.colliders[handle_one].parent().unwrap()
                    == self.physics_state.colliders[handle_two].parent().unwrap()
                {}

                let non_sensor_handle = if self.physics_state.colliders[handle_one].is_sensor() {
                    handle_one
                } else {
                    handle_two
                };

                self.physics_state
                    .bodies
                    .get_mut(
                        self.physics_state.colliders[non_sensor_handle]
                            .parent()
                            .unwrap(),
                    )
                    .unwrap()
                    .add_force(vector![0.0, 1000.0], true);
            });
    }
}

fn draw_triangle(pos: nalgebra::Vector2<f32>, rot: f32, color: mq::Color) {
    let p = glam::Vec2::new(pos.x, pos.y);
    mq::draw_triangle(
        p,
        p - glam::Vec2::from_angle(rot + (PI / 8.)) * (AGENT_SIZE as f32),
        p - glam::Vec2::from_angle(rot - (PI / 8.)) * (AGENT_SIZE as f32),
        color,
    );
}

fn conf() -> mq::Conf {
    mq::Conf {
        window_title: String::from("Macroquad"),
        window_width: WINDOW_SIZE_PX.0,
        window_height: WINDOW_SIZE_PX.1,
        fullscreen: false,
        ..Default::default()
    }
}

#[macroquad::main(conf)]
async fn main() {
    let mut world = World::new();

    loop {
        let _delta = mq::get_frame_time();

        if mq::is_key_pressed(mq::KeyCode::Escape) {
            break;
        }
        mq::clear_background(mq::Color {
            r: 0.078,
            g: 0.078,
            b: 0.078,
            a: 1.,
        });

        world.draw();
        world.update();

        mq::next_frame().await
    }
}
